{"version":3,"file":"static/js/888.ca063d4d.chunk.js","mappings":"sRAEMA,EAAU,mCACVC,EAAW,gCAEV,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAAA,UACGF,EADH,sCACyCD,IAC7CI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,OAAX,GACV,CAEM,SAASC,EAAYC,GAC1B,OAAON,EAAAA,EAAAA,IAAA,UAEAF,EAFA,gCAEgCD,EAFhC,iCAEgES,EAFhE,gCAIJL,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,OAAX,GACV,CAEM,SAASG,EAAgBC,GAC9B,OAAOR,EAAAA,EAAAA,IAAA,UACGF,EADH,iBACoBU,EADpB,oBACuCX,EADvC,oBAEJI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,IAAN,GACV,CAEM,SAASM,EAAgBD,GAC9B,OAAOR,EAAAA,EAAAA,IAAA,UAEAF,EAFA,iBAEiBU,EAFjB,4BAE4CX,EAF5C,oBAIJI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAKO,IAAX,GACV,CAEM,SAASC,EAAgBH,GAC9B,OAAOR,EAAAA,EAAAA,IAAA,UAEAF,EAFA,iBAEiBU,EAFjB,4BAE4CX,EAF5C,2BAIJI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,OAAX,GACV,C,+ICrCYQ,EAAOC,EAAAA,EAAAA,GAAH,4JCAJC,EAAMD,EAAAA,EAAAA,IAAH,2D,mBCGD,SAASE,EAAT,GACb,OAD6C,EAARL,KACzBM,KACV,YAA+D,IAA5DC,EAA2D,EAA3DA,GAAIC,EAAuD,EAAvDA,KAAuD,IAAjDC,UAAAA,OAAiD,MAArC,iBAAqC,EAAnBC,EAAmB,EAAnBA,aACzC,OACE,2BACE,SAACN,EAAD,CACEO,IACED,EAAY,yCAC0BA,GAClCE,EAENC,IAAKJ,KAEP,4BACE,mCAAWD,GAAQ,gCACnB,uCAAeC,GAAa,0CAXhC,UAAYA,EAAZ,YAAyBF,GAe5B,GAEJ,CChBc,SAASO,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOf,EAAP,KAAagB,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KAEQpB,GAAYqB,EAAAA,EAAAA,MAAZrB,QAeR,OAbAsB,EAAAA,EAAAA,YAAU,YACRrB,EAAAA,EAAAA,IAAgBD,GACbP,KAAKyB,GACLK,OAAM,SAAAC,GACLJ,EAASI,EAAEC,SACG,OAAVN,GACFO,EAAAA,GAAAA,MAAA,+CAAsBP,GAAS,CAC7BQ,UAAW,KAGhB,GACJ,GAAE,CAAC3B,EAASmB,KAGX,iCACE,SAAC,KAAD,KACA,oDACA,SAACf,EAAD,WACE,SAAC,EAAAwB,SAAD,CAAUC,UAAU,6CAApB,UACE,SAACtB,EAAD,CAAcL,KAAMA,UAK7B,C","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/CastOverview/CastOverview.styled.jsx","components/CastOverview/CastOwerview.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '126685e3c97a05ce8ea69747c86f816b';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport function getTranding() {\n  return axios\n    .get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`)\n    .then(r => r.data.results);\n}\n\nexport function searchMovie(query) {\n  return axios\n    .get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n    .then(r => r.data.results);\n}\n\nexport function getMovieDetails(movieId) {\n  return axios\n    .get(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n    .then(r => r.data);\n}\n\nexport function getMovieCredits(movieId) {\n  return axios\n    .get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n    .then(r => r.data.cast);\n}\n\nexport function getMovieReviews(movieId) {\n  return axios\n    .get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n    .then(r => r.data.results);\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 290px);\n  justify-content: center;\n  gap: 13px;\n  margin-top: 20px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Img = styled.img`\n  width: 290px;\n  height: 435px;\n`;\n","import PropTypes from 'prop-types';\nimport { Img } from './CastOverview.styled';\n\nimport notFound from '../../images/404/404-page.jpg';\n\nexport default function CastOverview({ cast }) {\n  return cast.map(\n    ({ id, name, character = 'No information', profile_path }) => {\n      return (\n        <li key={`${character}+${id}`}>\n          <Img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : notFound\n            }\n            alt={character}\n          />\n          <div>\n            <h3>Name: {name || 'No information about name'}</h3>\n            <p>Character: {character || 'No information about character.'}</p>\n          </div>\n        </li>\n      );\n    }\n  );\n}\n\nCastOverview.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport { getMovieCredits } from 'api/api';\n\nimport { List } from './Cast.styled';\n\nimport CastOverview from '../CastOverview/CastOwerview';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCredits(movieId)\n      .then(setCast)\n      .catch(e => {\n        setError(e.message);\n        if (error !== null) {\n          toast.error(`Ошибка ${error}`, {\n            autoClose: 1000,\n          });\n        }\n      });\n  }, [movieId, error]);\n\n  return (\n    <>\n      <ToastContainer />\n      <h2>Additional Information</h2>\n      <List>\n        <Suspense fallback={<div>Loading page...</div>}>\n          <CastOverview cast={cast} />\n        </Suspense>\n      </List>\n    </>\n  );\n}\n"],"names":["API_KEY","BASE_URL","getTranding","axios","then","r","data","results","searchMovie","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","List","styled","Img","CastOverview","map","id","name","character","profile_path","src","notFound","alt","Cast","useState","setCast","error","setError","useParams","useEffect","catch","e","message","toast","autoClose","Suspense","fallback"],"sourceRoot":""}